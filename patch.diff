diff --git a/mcabber/commands.c b/mcabber/commands.c
index f83e2e0..ca0fc6a 100644
--- a/mcabber/commands.c
+++ b/mcabber/commands.c
@@ -64,6 +64,7 @@ static void do_status_to(char *arg);
 static void do_add(char *arg);
 static void do_del(char *arg);
 static void do_group(char *arg);
+static void do_esay(char *arg);
 static void do_say(char *arg);
 static void do_msay(char *arg);
 static void do_say_to(char *arg);
@@ -222,6 +223,8 @@ void cmd_init(void)
   cmd_add("room", "MUC actions command", COMPL_ROOM, 0, &do_room, NULL);
   cmd_add("roster", "Manipulate the roster/buddylist", COMPL_ROSTER, 0,
           &do_roster, NULL);
+  cmd_add("esay", "Say something to the selected buddy using external editor",
+          0, 0, &do_esay, NULL);
   cmd_add("say", "Say something to the selected buddy", 0, 0, &do_say, NULL);
   cmd_add("say_to", "Say something to a specific buddy", COMPL_JID, 0,
           &do_say_to, NULL);
@@ -1429,6 +1432,35 @@ void say_cmd(char *arg, int parse_flags)
   g_free(arg);
 }
 
+static void do_esay(char *arg) {
+  // TODO: check errors through GError
+  gchar *editor = (gchar *)g_getenv("EDITOR");
+
+  gchar *file_path = NULL;
+  gint file_tmp = g_file_open_tmp("mcabber.esay.XXXXXXX", &(file_path), NULL);
+  close(file_tmp);
+
+  gchar *spawn_argv[] = { editor, file_path };
+
+  // TODO: check exit status
+  g_spawn_sync(NULL, spawn_argv, NULL, G_SPAWN_CHILD_INHERITS_STDIN,
+               NULL, NULL, NULL, NULL, NULL, NULL);
+
+  GMappedFile *file = g_mapped_file_new(file_path, FALSE, NULL);
+  gint file_size = g_mapped_file_get_length(file);
+
+  // +1 for '\0'
+  gint message_len = file_size + 1;
+  gchar *message = g_new0(gchar, message_len);
+
+  g_memmove(message, g_mapped_file_get_contents(file), file_size);
+  message[message_len - 1] = '\0';
+
+  do_say(message);
+
+  do_screen_refresh(NULL);
+}
+
 static void do_say(char *arg) {
   say_cmd(arg, 1);
 }
